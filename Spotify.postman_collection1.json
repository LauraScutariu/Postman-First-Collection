{
	"info": {
		"_postman_id": "d859bf7b-3106-46ef-8305-4530433d0c5e",
		"name": "Spotify",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28967842",
		"_collection_link": "https://red-meteor-361438.postman.co/workspace/Books-API~f824e098-348c-4a80-b38f-484376ee1ce3/collection/28967842-d859bf7b-3106-46ef-8305-4530433d0c5e?action=share&source=collection_link&creator=28967842"
	},
	"item": [
		{
			"name": "Token",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "Basic MDAyNjllZjkwYTdhNDUwZTlhZmY1MTgyOGY2M2NkNmQ6MGNjMTJkM2RjODYzNDZhZDk3ZjZlMjA5NjhkMWM4OGM=",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://accounts.spotify.com/api/token",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"api",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token Copy",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "Basic MDAyNjllZjkwYTdhNDUwZTlhZmY1MTgyOGY2M2NkNmQ6MGNjMTJkM2RjODYzNDZhZDk3ZjZlMjA5NjhkMWM4OGM=",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "00269ef90a7a450e9aff51828f63cd6d",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "0cc12d3dc86346ad97f6e20968d1c88c",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "http://itfactory/callback",
							"type": "text"
						},
						{
							"key": "code",
							"value": "AQCky33JRmSsFEaN-wJdPVKsliq3hRskKybV88sHNaLAgqrvjzRZWu-dzuvwuibI9AE1qmTYtHb3bweJUxlRLjk-vJu49dsL-A4g0MdqVbq9LVFoh-eaBeVsmKK2jfLvmZKQ8B44CyeWMEee_ENWhvDNe_hlwQrbAHRJUmUPP5qhLmLYRPib7uUGofbMqbhYoRW8Eg9FY0pruKOEW-aIoPqbFZHaukcC-955MncN3-3VRbqHhzlXRP8twkzUlrA4Uvz3MJudk6LbyAYaW-gXLVn8GUR9W57xWANy4TPFQZz51pKXBSZFSK1EZiDqFu7QMK2nExXgZY7IhEaJ8uNtl2JLStUm4Eendj4FduWgDBgQuVfijnkc8vd118C9NcmD2713Bgxi1yD9IyybVNZIktGnTKxl5OmNsJbhWUYe6XrBVA7zIUSR9aVe80djrOet9IZgJ6Aii9a5Vta4uvMv9bRoal3APzrlU0YhOYBfCvYNonCqksKBcRr97ElVxG2_ZnxVZCWzP5X67IWaBN3D_6R4iJ4powFjZY88XZiGyDS5Y5kmU_28V4rgFwvDj2p8d1kJ_J7-bfthDXMfYtoUy0fLOARwY2q4dQVRluiUM7jzyXT3p11T5oRxGP72Do_b3M07xU_PbwA4EOUBnsCH5mUWkJWrPptGYkduEgI1FUT5Ds6SnAe-jbCO18_6w51jTqP-rqFDsBn-ZZc-MP09",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://accounts.spotify.com/api/token",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"api",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Album",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence of the 'artists' array and its expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.artists).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.artists).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"pm.test(\"Total tracks is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.total_tracks).to.be.a('number').and.to.be.at.least(0, \"Value should be non-negative\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence and number of items in the 'tracks' object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.tracks).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.tracks.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.tracks.items.length).to.be.above(0, \"Number of items should be greater than zero\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						"4aawyAB9vmqN3uQ7FjRGTy"
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Several Albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'albums' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.albums).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'images' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.albums).to.exist.and.to.be.an('array');",
							"    ",
							"    responseData.albums.forEach(function(album) {",
							"        pm.expect(album.images).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/?ids=1A2GTWGtFfWp7KSQTwWOyo&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						""
					],
					"query": [
						{
							"key": "ids",
							"value": "1A2GTWGtFfWp7KSQTwWOyo"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Several Albums-ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Album type is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.album_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Artists array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.artists).to.exist.and.to.be.an('array');",
							"  pm.expect(responseData.artists).to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"The available_markets array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.available_markets).to.exist.and.to.be.an('array').that.has.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/382ObEPsp2rxGrnsizN5TX?ids=382ObEPsp2rxGrnsizN5TX",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						"382ObEPsp2rxGrnsizN5TX"
					],
					"query": [
						{
							"key": "ids",
							"value": "382ObEPsp2rxGrnsizN5TX"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Several Albums-Market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'albums' array is present in the response and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.albums).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Album type is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.albums[0].album_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Album type should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The 'artists' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.albums).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.albums[0].artists).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the name of each artist is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.albums).to.be.an('array').and.not.to.be.empty;",
							"  ",
							"  responseData.albums.forEach(function(album) {",
							"    album.artists.forEach(function(artist) {",
							"      pm.expect(artist.name).to.be.a('string').and.not.to.be.empty;",
							"    });",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/?ids=1A2GTWGtFfWp7KSQTwWOyo&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						""
					],
					"query": [
						{
							"key": "ids",
							"value": "1A2GTWGtFfWp7KSQTwWOyo"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Album Tracks-id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy/tracks?id=4aawyAB9vmqN3uQ7FjRGTy",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						"4aawyAB9vmqN3uQ7FjRGTy",
						"tracks"
					],
					"query": [
						{
							"key": "id",
							"value": "4aawyAB9vmqN3uQ7FjRGTy"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Album Tracks-Market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'items' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array').that.has.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'artists' array is present in each item and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.be.an('array');",
							"    responseData.items.forEach(function(item) {",
							"        pm.expect(item.artists).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'name' field is a non-empty string in each item\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"    ",
							"    responseData.items.forEach(function (item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The duration_ms field is a non-negative integer in each item\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.be.an('array');",
							"",
							"    responseData.items.forEach(function (item) {",
							"        pm.expect(item.duration_ms).to.be.a('number');",
							"        pm.expect(item.duration_ms).to.be.at.least(0, \"Value should be a non-negative integer\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy/tracks?id=4aawyAB9vmqN3uQ7FjRGTy&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						"4aawyAB9vmqN3uQ7FjRGTy",
						"tracks"
					],
					"query": [
						{
							"key": "id",
							"value": "4aawyAB9vmqN3uQ7FjRGTy"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Album Tracks-limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.href).to.exist;",
							"  pm.expect(responseData.items).to.exist;",
							"  pm.expect(responseData.limit).to.exist;",
							"  pm.expect(responseData.next).to.exist;",
							"  pm.expect(responseData.offset).to.exist;",
							"  pm.expect(responseData.previous).to.exist;",
							"  pm.expect(responseData.total).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'items' array is present in the response and contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.items).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Each item in the 'items' array has a valid duration_ms value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.be.an('array');",
							"",
							"    responseData.items.forEach(function(item) {",
							"        pm.expect(item.duration_ms).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy/tracks?id=4aawyAB9vmqN3uQ7FjRGTy&limit=10",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						"4aawyAB9vmqN3uQ7FjRGTy",
						"tracks"
					],
					"query": [
						{
							"key": "id",
							"value": "4aawyAB9vmqN3uQ7FjRGTy"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get Album Tracks-offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'items' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"The 'limit' field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.limit).to.be.a('number');",
							"    pm.expect(responseData.limit).to.be.greaterThan(-1);",
							"});",
							"",
							"",
							"pm.test(\"Total field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.total).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.total).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy/tracks?id=4aawyAB9vmqN3uQ7FjRGTy&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						"4aawyAB9vmqN3uQ7FjRGTy",
						"tracks"
					],
					"query": [
						{
							"key": "id",
							"value": "4aawyAB9vmqN3uQ7FjRGTy"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get User's Saved Albums-limit,offser,market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The response contains the 'items' array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.items).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate the added_at field in each item is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.be.an('array');",
							"    ",
							"    responseData.items.forEach(function (item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.added_at).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the album object in each item\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.items).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Items array should not be empty\");",
							"",
							"  responseData.items.forEach(function (item) {",
							"    pm.expect(item.album).to.exist.and.to.be.an('object');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'artists' array in each album object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"",
							"    responseData.items.forEach(function (item) {",
							"        pm.expect(item.artists).to.exist.and.to.be.an('array').that.has.lengthOf.at.least(1);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer BQAYAS36G8WUGFLS1ThP9Fjj68O1lDpwaKJRDmegYe2Z0Z8SaUN4y6E-sDerYrJz0nYl8xwUpJcw4kPDExB4NGmWaeT1JwR48bAa5DotRKR6meXxZHI",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums?limit=10&offset=0&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Save Albums for Current User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"1A2GTWGtFfWp7KSQTwWOyo\": [\n        \"string\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums?ids=1A2GTWGtFfWp7KSQTwWOyo",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums"
					],
					"query": [
						{
							"key": "ids",
							"value": "1A2GTWGtFfWp7KSQTwWOyo"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Remove Users'Saved Albums",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"382ObEPsp2rxGrnsizN5TX\": [\n        \"string\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums?ids=382ObEPsp2rxGrnsizN5TX",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums"
					],
					"query": [
						{
							"key": "ids",
							"value": "382ObEPsp2rxGrnsizN5TX"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Check User's Saved Albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"The response array contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"The element in the array is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(element) {",
							"    pm.expect(element).to.be.a('boolean');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the boolean value is true\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData[0]).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/albums/contains?ids=382ObEPsp2rxGrnsizN5TX",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"albums",
						"contains"
					],
					"query": [
						{
							"key": "ids",
							"value": "382ObEPsp2rxGrnsizN5TX"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Albums-Get New Releases-country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'albums' object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.albums).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence and length of 'items' array in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.albums).to.be.an('object');",
							"    pm.expect(responseData.albums.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.albums.items).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Each item in the 'items' array has a non-empty name\", function () {",
							"    const responseData = pm.response.json();",
							"    const items = responseData.albums.items;",
							"",
							"    pm.expect(items).to.be.an('array').that.is.not.empty;",
							"",
							"    items.forEach((item) => {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/new-releases?country=SE",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"new-releases"
					],
					"query": [
						{
							"key": "country",
							"value": "SE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Artists-Get Artists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"external_urls.spotify is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.external_urls.spotify).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Followers total is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.followers.total).to.be.a('number');",
							"    pm.expect(responseData.followers.total).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Genres should be an array and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.genres).to.be.an('array');",
							"    pm.expect(responseData.genres).to.have.lengthOf.at.least(1, \"Genres should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg"
					]
				}
			},
			"response": []
		},
		{
			"name": "Artists-Get Several Artists",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists?ids=2CIMQHirSU0MQqyYHq0eOx",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists"
					],
					"query": [
						{
							"key": "ids",
							"value": "2CIMQHirSU0MQqyYHq0eOx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Artists-Get Artist's Albums-id,include_groups,market,limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.href).to.exist;",
							"  pm.expect(responseData.items).to.exist;",
							"  pm.expect(responseData.limit).to.exist;",
							"  pm.expect(responseData.next).to.exist;",
							"  pm.expect(responseData.offset).to.exist;",
							"  pm.expect(responseData.previous).to.exist;",
							"  pm.expect(responseData.total).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'items' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Total field is a number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.total).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/albums?include_groups=single&market=ES&limit=10&offset=5&id=0TnOYISbd1XYRBk9myaseg",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg",
						"albums"
					],
					"query": [
						{
							"key": "include_groups",
							"value": "single"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						},
						{
							"key": "id",
							"value": "0TnOYISbd1XYRBk9myaseg"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Artists-Get Artist's Tracks-id,market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'tracks' array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.tracks).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'name' field is a non-empty string in each track\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.tracks).to.be.an('array');",
							"    ",
							"    responseData.tracks.forEach(function(track) {",
							"        pm.expect(track.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/top-tracks?id=0TnOYISbd1XYRBk9myaseg&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg",
						"top-tracks"
					],
					"query": [
						{
							"key": "id",
							"value": "0TnOYISbd1XYRBk9myaseg"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Artists-Get Artist's Related Artists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence and length of the artists array\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.artists).to.exist;",
							"    pm.expect(responseData.artists).to.be.an('array');",
							"    pm.expect(responseData.artists).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate external_urls object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.artists).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"",
							"  responseData.artists.forEach(function(artist) {",
							"    pm.expect(artist.external_urls).to.exist.and.to.be.an('object');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Validate the genres array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.artists).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"  ",
							"  responseData.artists.forEach(function(artist) {",
							"    pm.expect(artist.genres).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/related-artists",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg",
						"related-artists"
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Get an Audiobook-id,market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The response should contain the 'audiobooks' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.audiobooks).to.exist.and.to.be.an('array');",
							"});",
							"",
							"pm.test(\"The 'audiobooks' array should contain the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.audiobooks).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'audiobooks' array contains only non-null values\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.audiobooks).to.be.an('array');",
							"    responseData.audiobooks.forEach(function (audiobook) {",
							"        pm.expect(audiobook).to.not.be.null;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'ids' parameter matches the 'audiobooks' array\", function () {",
							"    const requestParams = pm.request.url.query.toObject();",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.audiobooks).to.be.an('array');",
							"",
							"    responseData.audiobooks.forEach(function(audiobook, index) {",
							"        pm.expect(audiobook).to.equal(requestParams.ids[index]);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audiobooks?ids=76ojBpo2VyjacPHQmEXmtA",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audiobooks"
					],
					"query": [
						{
							"key": "ids",
							"value": "76ojBpo2VyjacPHQmEXmtA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Get Several Audiobooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify audiobooks array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.audiobooks).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.audiobooks).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"The audiobooks array should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.audiobooks).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each element in the 'audiobooks' array is a non-null object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.audiobooks).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.audiobooks.forEach(function(audiobook) {",
							"        pm.expect(audiobook).to.be.an('object').that.is.not.null;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audiobooks?ids=18yVqkdbdRvS24c0Ilj2ci&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audiobooks"
					],
					"query": [
						{
							"key": "ids",
							"value": "18yVqkdbdRvS24c0Ilj2ci"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Get Several Audiobooks-ids,market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - audiobooks\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.audiobooks).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"The audiobooks array should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.audiobooks).to.exist.and.to.be.an('array').and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Audiobooks array should contain non-null values\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.audiobooks).to.be.an('array');",
							"  responseData.audiobooks.forEach(function (audiobook) {",
							"    pm.expect(audiobook).to.not.be.null;",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audiobooks?ids=18yVqkdbdRvS24c0Ilj2ci&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audiobooks"
					],
					"query": [
						{
							"key": "ids",
							"value": "18yVqkdbdRvS24c0Ilj2ci"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Get Audiobook Chapter-id,market,limit,offset",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audiobooks/7iHfbu1YPACw6oZPAFJtqe/chapters?id=7iHfbu1YPACw6oZPAFJtqe&market=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audiobooks",
						"7iHfbu1YPACw6oZPAFJtqe",
						"chapters"
					],
					"query": [
						{
							"key": "id",
							"value": "7iHfbu1YPACw6oZPAFJtqe"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Get User's Saved Audiobooks-limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate href field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.href).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'items' field is an array and is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.items).to.be.an('array').and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"The limit field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.limit).to.be.a('number');",
							"    pm.expect(responseData.limit).to.be.at.least(0, \"Value should be non-negative\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'next' field is null or a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.next).to.be.oneOf([null, pm.expect(responseData.next).to.be.a('string').and.to.have.lengthOf.at.least(1)]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/audiobooks?limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"audiobooks"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Save Audiobooks for Current User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/audiobooks?ids=18yVqkdbdRvS24c0Ilj2ci",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"audiobooks"
					],
					"query": [
						{
							"key": "ids",
							"value": "18yVqkdbdRvS24c0Ilj2ci"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Remove User's Saved Audiobooks",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/audiobooks?ids=18yVqkdbdRvS24c0Ilj2ci",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"audiobooks"
					],
					"query": [
						{
							"key": "ids",
							"value": "18yVqkdbdRvS24c0Ilj2ci"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Audiobooks-Check User's Saved Audiobooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function() {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Response contains the expected value (true)\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an(\"array\");",
							"    pm.expect(responseData).to.include(true);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Value in the response is a boolean\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(value){",
							"        pm.expect(value).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/audiobooks/contains?ids=18yVqkdbdRvS24c0Ilj2ci",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"audiobooks",
						"contains"
					],
					"query": [
						{
							"key": "ids",
							"value": "18yVqkdbdRvS24c0Ilj2ci"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Categories-Get Several Browse Category-country,local,limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate 'categories' object\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.categories).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'items' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.categories).to.exist;",
							"    pm.expect(responseData.categories.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.categories.items.length).to.be.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'name' field in each item is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.categories.items).to.exist.and.to.be.an('array');",
							"    ",
							"    responseData.categories.items.forEach(function(item) {",
							"        pm.expect(item.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/categories?country=SE&locale=sv_SE&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"categories"
					],
					"query": [
						{
							"key": "country",
							"value": "SE"
						},
						{
							"key": "locale",
							"value": "sv_SE"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Categories-Get Single Browse Category-category_id,country,locale",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.href).to.exist;",
							"    pm.expect(responseData.icons).to.exist;",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.name).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"href is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.href).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Icons is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.icons).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/categories/dinner?category_id=dinner&country=SE&locale=sv_SE",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"categories",
						"dinner"
					],
					"query": [
						{
							"key": "category_id",
							"value": "dinner"
						},
						{
							"key": "country",
							"value": "SE"
						},
						{
							"key": "locale",
							"value": "sv_SE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Chapters-Get a Chapter",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/chapters/0D5wENdkdwbqlrHoaJ9g29?id=0D5wENdkdwbqlrHoaJ9g29&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"chapters",
						"0D5wENdkdwbqlrHoaJ9g29"
					],
					"query": [
						{
							"key": "id",
							"value": "0D5wENdkdwbqlrHoaJ9g29"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Chapters-Get Several Chapters-ids,market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.chapters).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Chapters array should contain at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.chapters).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the chapters array is not null\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.chapters).to.be.an('array');",
							"    responseData.chapters.forEach(function(chapter) {",
							"        pm.expect(chapter).to.not.be.null;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/chapters?ids=0IsXVP0JmcB2adSE338GkK&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"chapters"
					],
					"query": [
						{
							"key": "ids",
							"value": "0IsXVP0JmcB2adSE338GkK"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Episodes-Get Episode-id,market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"audio_preview_url is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.audio_preview_url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Duration_ms is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.duration_ms).to.be.a('number');",
							"  pm.expect(responseData.duration_ms).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"external_urls.spotify is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.external_urls.spotify).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/episodes/512ojhOuo1ktJprKbVcKyQ?id=512ojhOuo1ktJprKbVcKyQ&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"episodes",
						"512ojhOuo1ktJprKbVcKyQ"
					],
					"query": [
						{
							"key": "id",
							"value": "512ojhOuo1ktJprKbVcKyQ"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Episodes-Get several Episodes-ids,market",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'episodes' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.episodes).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"The duration_ms should be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.episodes).to.be.an('array');",
							"",
							"    responseData.episodes.forEach(function(episode) {",
							"        pm.expect(episode.duration_ms).to.be.a('number');",
							"        pm.expect(episode.duration_ms).to.be.at.least(0, \"Value should be non-negative\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate 'explicit' is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.episodes).to.be.an('array').and.not.empty;",
							"    ",
							"    responseData.episodes.forEach(function (episode) {",
							"        pm.expect(episode.explicit).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/episodes?ids=77o6BIVlYM3msb4MMIL1jH&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"episodes"
					],
					"query": [
						{
							"key": "ids",
							"value": "77o6BIVlYM3msb4MMIL1jH"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Episodes-Get User's Saved Episodes-market,limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the presence and length of the 'items' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.items).to.have.lengthOf(0);",
							"});",
							"",
							"",
							"pm.test(\"Limit and offset are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.limit).to.be.a('number').and.to.be.gte(0);",
							"  pm.expect(responseData.offset).to.be.a('number').and.to.be.gte(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/episodes?market=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"episodes"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Episodes-Save Episodes for Current User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"77o6BIVlYM3msb4MMIL1jH\": [\n        \"string\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/episodes?ids=77o6BIVlYM3msb4MMIL1jH",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"episodes"
					],
					"query": [
						{
							"key": "ids",
							"value": "77o6BIVlYM3msb4MMIL1jH"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Episodes-Remove User's Saved Episodes",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"7ouMYWpwJ422jRcDASZB7P\": [\n        \"string\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/episodes?ids=7ouMYWpwJ422jRcDASZB7P",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"episodes"
					],
					"query": [
						{
							"key": "ids",
							"value": "7ouMYWpwJ422jRcDASZB7P"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Episodes-Check User's Saved Episodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Response elements are of type boolean\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (element) {",
							"        pm.expect(element).to.be.a('boolean');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Test that response elements are either true or false\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (element) {",
							"        pm.expect(element).to.be.oneOf([true, false]);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/episodes/contains?ids=77o6BIVlYM3msb4MMIL1jH",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"episodes",
						"contains"
					],
					"query": [
						{
							"key": "ids",
							"value": "77o6BIVlYM3msb4MMIL1jH"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Genres-Get Available Genre Seeds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Genres array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.genres).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Genres array is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.genres).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each genre in the genres array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.genres).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.genres.forEach(function(genre) {",
							"        pm.expect(genre).to.be.a('string').and.to.have.length.above(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQAKtm4HWCB2deF0kwofR0PyFEis221VddGZ6TVp7VP507f7TR2C9706FPK5IDAABk0pHqe36JsvRFU2Oyjuf3ITIpNasYaTEdDRYc04ceylNI09nXvq2pWQQz6TVEsoRsccJGOwkT8KiadKLuz0ff-7NUKq4LN_GNgiTKP4hkdH57TjC71nZiwqOsjSrl2RDYmOoFqbNSbClK4tIZvEctSZMPJQ9voAjzQlRqgUo18PLBKyxxk2hW5E3IGFMkqLi9Q0VKwuZnSqQqgwZY9gXB-gPrIVyHIwCS-a-7rsDjLY3Ygpb4AwpFrIhUoORGCjwP97zru50x6Y6LrrYtSw",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/recommendations/available-genre-seeds",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"recommendations",
						"available-genre-seeds"
					]
				}
			},
			"response": []
		},
		{
			"name": "Markets-Get Available Markets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - markets\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.markets).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"The markets array should have at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.markets).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the markets array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.markets).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.markets.forEach(function (market) {",
							"        pm.expect(market).to.be.a('string').that.is.not.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/markets",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"markets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Get Playback State-market,aditional_type",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player?market=ES&additional_types",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "additional_types",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Transfer Playback",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"device_ids\": [\n        \"74ASZWbe4lXaubB36ztrGX\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/player",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player"
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Get Available Devices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.devices).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Devices is an empty array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.devices).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Validate the format of the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.devices).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/devices",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Get Currently Playing Track-market,aditional_type",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/currently-playing?market=ES&additional_types",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"currently-playing"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "additional_types",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Start/Resume Playback -device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"context_uri\": \"spotify:album:5ht7ItJgpBH7W6vJ5BqpPr\",\n    \"offset\": {\n        \"position\": 5\n    },\n    \"position_ms\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/play?device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"play"
					],
					"query": [
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Pause Playback-device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/pause?device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"pause"
					],
					"query": [
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Skip to Next-device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/next?device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8\"",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"next"
					],
					"query": [
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8\""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Skip to Previous-device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/previous?device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"previous"
					],
					"query": [
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Seek to Position-position_ms,device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/seek?position_ms=25000&device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"seek"
					],
					"query": [
						{
							"key": "position_ms",
							"value": "25000"
						},
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Set Repeat Mode-state,device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/repeat?state=context&device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"repeat"
					],
					"query": [
						{
							"key": "state",
							"value": "context"
						},
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Set Playback Volume-volume_percent,device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/volume?volume_percent=50&device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"volume"
					],
					"query": [
						{
							"key": "volume_percent",
							"value": "50"
						},
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Toggle Playback Shuffle-state,device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/shuffle?state=true&device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"shuffle"
					],
					"query": [
						{
							"key": "state",
							"value": "true"
						},
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Get Recently Played Tracks-limit,after,before",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/recently-played?limit=10&after=1484811043508&before",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"recently-played"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "after",
							"value": "1484811043508"
						},
						{
							"key": "before",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Get the User's Queue",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/queue",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"queue"
					]
				}
			},
			"response": []
		},
		{
			"name": "Player-Add Item to Playback Queue-uri,device_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/player/queue?uri=spotify:track:4iV5W9uYEdYUVa79Axb7Rh&device_id=0d1841b0976bae2a3a310dd74c0f3df354899bc8",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"player",
						"queue"
					],
					"query": [
						{
							"key": "uri",
							"value": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh"
						},
						{
							"key": "device_id",
							"value": "0d1841b0976bae2a3a310dd74c0f3df354899bc8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlist-Get Playlist-playlist_id,market,fields,additional_types",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n?playlist_id=3cEYpjA9oz9GiPac4AsH4n&fields=items(added_by.id,track(name,href,album(name,href)))&additional_types",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						},
						{
							"key": "fields",
							"value": "items(added_by.id,track(name,href,album(name,href)))"
						},
						{
							"key": "additional_types",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Change Playlist Details-playlist_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"My New Playlist Title\",\n    \"description\": \"Updated playlist description\",\n    \"public\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n?playlist_id=3cEYpjA9oz9GiPac4AsH4n",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlist-Get Playlist items-playlist_id,market,fields,limit,offset,additional_types",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks?playlist_id=3cEYpjA9oz9GiPac4AsH4n&market=ES&fields=items(added_by.id,track(name,href,album(name,href)))&limit=10&offset=5&additional_types",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "fields",
							"value": "items(added_by.id,track(name,href,album(name,href)))"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						},
						{
							"key": "additional_types",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlist-Update Playlist Items-playlist_id,uris",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"range_start\": 1,\n    \"insert_before\": 3,\n    \"range_length\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks?playlist_id=3cEYpjA9oz9GiPac4AsH4n&uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						},
						{
							"key": "uris",
							"value": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Add items to Playlist-playlist_id,position,uris",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"uris\": [\n        \"string\"\n    ],\n    \"position\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks?playlist_id=3cEYpjA9oz9GiPac4AsH4n&uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						},
						{
							"key": "uris",
							"value": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh, spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Remove Playlist Items-playlist_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"tracks\": [\n        {\n            \"uri\": \"string\"\n        }\n    ],\n    \"snapshot_id\": \"string\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks?playlist_id=3cEYpjA9oz9GiPac4AsH4n",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Get Current User's playlists-limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'items' array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"The limit should be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.limit).to.be.a('number').and.to.satisfy((limit) => limit >= 0, \"Limit should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Offset is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.offset).to.be.a('number');",
							"    pm.expect(responseData.offset).to.be.at.least(0, \"Offset should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'total' is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.total).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/playlists?limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"playlists"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Get User's Playlists-user_id,limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'items' array is present and contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.items.length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/users/smedjan/playlists?user_id=smedjan&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"users",
						"smedjan",
						"playlists"
					],
					"query": [
						{
							"key": "user_id",
							"value": "smedjan"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Create playlist-user_id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"New Playlist\",\n    \"description\": \"New playlist description\",\n    \"public\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/users/smedjanplaylists?user_id=smedjan",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"users",
						"smedjanplaylists"
					],
					"query": [
						{
							"key": "user_id",
							"value": "smedjan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Get Featured playlists-country,locale,timestamp,limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the playlists object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.playlists).to.exist;",
							"    pm.expect(responseData.playlists).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence and length of the 'items' array\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.playlists).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.playlists.items).to.exist.and.to.be.an('array');",
							"  pm.expect(responseData.playlists.items).to.have.lengthOf(1, \"Expected number of items is 1\");",
							"});",
							"",
							"",
							"pm.test(\"The 'collaborative' field should be a boolean\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.playlists.items).to.be.an('array');",
							"    ",
							"    responseData.playlists.items.forEach(function(item) {",
							"        pm.expect(item.collaborative).to.be.a('boolean');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The name field should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.playlists.items).to.be.an('array');",
							"  ",
							"  responseData.playlists.items.forEach(function(item) {",
							"    pm.expect(item.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/featured-playlists?country=SE&locale=sv_SE&timestamp=2014-10-23T09:00:00&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"featured-playlists"
					],
					"query": [
						{
							"key": "country",
							"value": "SE"
						},
						{
							"key": "locale",
							"value": "sv_SE"
						},
						{
							"key": "timestamp",
							"value": "2014-10-23T09:00:00"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Get Category's Playlists-category_id,country,limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'playlists' object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.playlists).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'items' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.playlists.items).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate limit, next, and offset properties\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.playlists.limit).to.exist;",
							"  pm.expect(responseData.playlists.next).to.exist;",
							"  pm.expect(responseData.playlists.offset).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/categories/dinner/playlists?category_id=dinner&country=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"categories",
						"dinner",
						"playlists"
					],
					"query": [
						{
							"key": "category_id",
							"value": "dinner"
						},
						{
							"key": "country",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Get Playlists Cover Image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData.length).to.be.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each image object has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function (image) {",
							"        pm.expect(image).to.be.an('object');",
							"        pm.expect(image.height).to.exist.and.to.be.a('number');",
							"        pm.expect(image.url).to.exist.and.to.be.a('string');",
							"        pm.expect(image.width).to.exist.and.to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The url field in each image object is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function(image){",
							"        pm.expect(image.url).to.be.a('string').and.to.not.be.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate height and width fields in each image object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(image) {",
							"        pm.expect(image).to.be.an('object');",
							"        pm.expect(image.height).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(image.width).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/images",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Playlists-Add Custom Playlist Cover Image",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "image/jpeg",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "",
							"value": "/9j/2wCEABoZGSccJz4lJT5CLy8vQkc9Ozs9R0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0cBHCcnMyYzPSYmPUc9Mj1HR0dEREdHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR//dAAQAAf/uAA5BZG9iZQBkwAAAAAH/wAARCAABAAEDACIAAREBAhEB/8QASwABAQAAAAAAAAAAAAAAAAAAAAYBAQAAAAAAAAAAAAAAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAARAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwAAARECEQA/AJgAH//Z",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/images",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search-Search for Item-q,type,market,limit,offset,include_external",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'albums' object is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.albums).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate the presence and number of elements in the 'items' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.albums).to.exist;",
							"    pm.expect(responseData.albums.items).to.exist;",
							"    pm.expect(responseData.albums.items).to.be.an('array');",
							"    pm.expect(responseData.albums.items).to.have.lengthOf(0);",
							"});",
							"",
							"",
							"pm.test(\"The limit value is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.albums.limit).to.be.a('number');",
							"  pm.expect(responseData.albums.limit).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Total value is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.albums.total).to.be.a('number');",
							"  pm.expect(responseData.albums.total).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/search?q=remaster%20track:Doxy%20artist:Miles%20Davis&type=album&market=ES&limit=10&offset=5&include_external=audio",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "remaster%20track:Doxy%20artist:Miles%20Davis"
						},
						{
							"key": "type",
							"value": "album"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						},
						{
							"key": "include_external",
							"value": "audio"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Shows-Get Show-market,id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate available_markets array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.available_markets).to.exist.and.to.be.an(\"array\");",
							"    pm.expect(responseData.available_markets).to.have.lengthOf.at.least(1, \"available_markets should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Episodes object is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.episodes).to.exist;",
							"    pm.expect(responseData.episodes).to.be.an('object');",
							"    pm.expect(responseData.episodes.items).to.be.an('array');",
							"    pm.expect(responseData.episodes.items).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Name field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The duration_ms field should be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.episodes.items).to.be.an('array');",
							"    ",
							"    responseData.episodes.items.forEach(function (item) {",
							"        pm.expect(item.duration_ms).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ?market=ES&id=38bS44xjbVVZ3No3ByF1dJ",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"shows",
						"38bS44xjbVVZ3No3ByF1dJ"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "id",
							"value": "38bS44xjbVVZ3No3ByF1dJ"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Shows-Get Several Shows-market,ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'shows' array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.shows).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate available_markets array for each show is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.shows).to.be.an('array');",
							"    ",
							"    responseData.shows.forEach(function(show) {",
							"        pm.expect(show.available_markets).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each image object in the images array should have a non-empty url field\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.shows).to.be.an('array');",
							"  ",
							"  responseData.shows.forEach(function(show) {",
							"    pm.expect(show.images).to.be.an('array');",
							"    ",
							"    show.images.forEach(function(image) {",
							"      pm.expect(image).to.be.an('object');",
							"      pm.expect(image.url).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"  });",
							"});",
							"",
							"pm.test(\"Total episodes for each show is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.shows).to.be.an('array');",
							"",
							"    responseData.shows.forEach(function(show) {",
							"        pm.expect(show.total_episodes).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/shows?market=ES&ids=5CfCWKI5pZ28U0uOzXkDHe",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"shows"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "ids",
							"value": "5CfCWKI5pZ28U0uOzXkDHe"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Shows-Get Show Episodes-id,market,limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The 'items' array is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.items).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The audio_preview_url should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.items).to.be.an('array');",
							"  pm.expect(responseData.items.length).to.be.greaterThan(0);",
							"",
							"  responseData.items.forEach(function (item) {",
							"    pm.expect(item.audio_preview_url).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ/episodes?id=38bS44xjbVVZ3No3ByF1dJ&market=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"shows",
						"38bS44xjbVVZ3No3ByF1dJ",
						"episodes"
					],
					"query": [
						{
							"key": "id",
							"value": "38bS44xjbVVZ3No3ByF1dJ"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Shows-Get User's Save Shows-limit,offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate href field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"  ",
							"    pm.expect(responseData.href).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the presence and non-emptiness of the 'items' array\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"The limit field is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.limit).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.limit).to.be.at.least(0, \"Value should be non-negative\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'next' field is null or a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.next).to.satisfy(function (value) {",
							"        return value === null || value.length > 0;",
							"    }, \"Value should be null or a non-empty string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/shows?limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"shows"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Shows-Save Shows for Current user",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/shows?ids=5CfCWKI5pZ28U0uOzXkDHe",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"shows"
					],
					"query": [
						{
							"key": "ids",
							"value": "5CfCWKI5pZ28U0uOzXkDHe"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Shows-Remove User's Saved Show-ids,market",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/shows?ids=5CfCWKI5pZ28U0uOzXkDHe&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"shows"
					],
					"query": [
						{
							"key": "ids",
							"value": "5CfCWKI5pZ28U0uOzXkDHe"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Shows-Check user's Saved Shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the response is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(element) {",
							"        pm.expect(element).to.be.a('boolean');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/shows/contains?ids=5CfCWKI5pZ28U0uOzXkDHe",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"shows",
						"contains"
					],
					"query": [
						{
							"key": "ids",
							"value": "5CfCWKI5pZ28U0uOzXkDHe"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Get Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"duration_ms is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.duration_ms).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.duration_ms).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"The track has a name and an ID\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl?id=11dFghVXANMlKmJXsNCbNl&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"tracks",
						"11dFghVXANMlKmJXsNCbNl"
					],
					"query": [
						{
							"key": "id",
							"value": "11dFghVXANMlKmJXsNCbNl"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Get Seversl Tracks-market,ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The response contains a non-empty 'tracks' array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.tracks).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'artists' array in each track is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.tracks).to.be.an('array');",
							"    ",
							"    responseData.tracks.forEach(function(track) {",
							"        pm.expect(track.artists).to.exist.and.to.be.an('array').that.is.not.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'name' field in each track is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.tracks).to.be.an('array');",
							"  ",
							"  responseData.tracks.forEach(function(track) {",
							"    pm.expect(track.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/tracks?market=ES&ids=7ouMYWpwJ422jRcDASZB7P",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"tracks"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "ids",
							"value": "7ouMYWpwJ422jRcDASZB7P"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Get User's Saved Tracks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate href field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.href).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'items' field is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.items).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"The limit field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.limit).to.be.a('number');",
							"    pm.expect(responseData.limit).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'next' field is null or a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.next).to.satisfy(function (value) {",
							"        return value === null || typeof value === 'string';",
							"    }, \"'next' field should be null or a non-empty string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/tracks?market=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"tracks"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Save Tracks for Current User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/tracks?ids=7ouMYWpwJ422jRcDASZB7P",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"tracks"
					],
					"query": [
						{
							"key": "ids",
							"value": "7ouMYWpwJ422jRcDASZB7P"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-remove User's Saved Tracks",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ids\": [\n        \"string\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/tracks?id=7ouMYWpwJ422jRcDASZB7P",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"tracks"
					],
					"query": [
						{
							"key": "id",
							"value": "7ouMYWpwJ422jRcDASZB7P"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Check User's Saved Tracks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response body contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Response body elements are of boolean type\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(element) {",
							"        pm.expect(element).to.be.a('boolean');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response body elements are either true or false\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function (element) {",
							"    pm.expect(element).to.be.oneOf([true, false]);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/tracks/contains?ids=7ouMYWpwJ422jRcDASZB7P",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"tracks",
						"contains"
					],
					"query": [
						{
							"key": "ids",
							"value": "7ouMYWpwJ422jRcDASZB7P"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Get Tracks'Audio Features",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Danceability is a number between 0 and 1\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.audio_features).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.audio_features.forEach(function (audioFeature) {",
							"    pm.expect(audioFeature.danceability).to.be.a('number').within(0, 1);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"duration_ms is a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.audio_features).to.be.an('array');",
							"    ",
							"    responseData.audio_features.forEach(function (feature) {",
							"        pm.expect(feature.duration_ms).to.be.a('number').and.to.be.greaterThan(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Tempo is a number greater than 0\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.audio_features).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.audio_features.forEach(function(feature) {",
							"    pm.expect(feature.tempo).to.be.a('number').and.to.be.above(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audio-features?ids=7ouMYWpwJ422jRcDASZB7P",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audio-features"
					],
					"query": [
						{
							"key": "ids",
							"value": "7ouMYWpwJ422jRcDASZB7P"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Get Track's Audio Features",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that danceability is a number between 0 and 1\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.danceability).to.be.a('number');",
							"  pm.expect(responseData.danceability).to.be.within(0, 1);",
							"});",
							"",
							"",
							"pm.test(\"Verify that 'energy' is a number between 0 and 1\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.energy).to.be.a('number');",
							"  pm.expect(responseData.energy).to.be.within(0, 1);",
							"});",
							"",
							"",
							"pm.test(\"Tempo is a positive number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.tempo).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audio-features/11dFghVXANMlKmJXsNCbNl",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audio-features",
						"11dFghVXANMlKmJXsNCbNl"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Get Track's Audio Analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence and length of the 'bars' array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.bars).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.bars).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Start and duration fields in bars array are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.bars).to.be.an('array');",
							"    responseData.bars.forEach(function(bar) {",
							"        pm.expect(bar.start).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(bar.duration).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audio-analysis/11dFghVXANMlKmJXsNCbNl",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audio-analysis",
						"11dFghVXANMlKmJXsNCbNl"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tracks-Get Recommendation-limit,market,seed_artists,seed_genres, seed_tracks,min_acousticness, max_acousticness ,target_,acousticness ,min_danceability ,max_danceability ,target_danceability ,min_duration_ms ,max_duration_ms ,target_duration_ms ,min_energ",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/recommendations?limit=10&market=ES&seed_artists=4NHQUGzhtTLFvgF5SZesLK&seed_tracks=0c6xIDDpzE81m2q797ordA&min_acousticness=140&max_acousticness=0,35&target_acousticness=0,6&min_danceability=140&max_danceability=0,35&target_danceability=0,8&min_duration_ms=140&max_duration_ms=0,35&target_duration_ms&min_energy=140&max_energy=0,35&target_energy=0,6&min_instrumentalness=140&max_instrumentalness=0,35&target_instrumentalness=0,6&min_key=140&max_key=0,35&target_key=0,6&min_liveness=140&max_liveness=0,35&target_liveness=0,6&min_loudness=140&max_loudness=0,35&target_loudness=0,6&min_mode=140&max_mode=0,35&target_mode=0,6&min_popularity=140&max_popularity=0,35&target_popularity=0,6&min_speechiness=140&max_speechiness=0,35&target_speechiness=0,6&min_tempo=140&max_tempo=0,35&target_tempo&min_time_signature=140&max_time_signature=0,6&target_time_signature=0,6&min_valence=140&max_valence=0,35&target_valence=0,6",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"recommendations"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "seed_artists",
							"value": "4NHQUGzhtTLFvgF5SZesLK"
						},
						{
							"key": "seed_tracks",
							"value": "0c6xIDDpzE81m2q797ordA"
						},
						{
							"key": "min_acousticness",
							"value": "140"
						},
						{
							"key": "max_acousticness",
							"value": "0,35"
						},
						{
							"key": "target_acousticness",
							"value": "0,6"
						},
						{
							"key": "min_danceability",
							"value": "140"
						},
						{
							"key": "max_danceability",
							"value": "0,35"
						},
						{
							"key": "target_danceability",
							"value": "0,8"
						},
						{
							"key": "min_duration_ms",
							"value": "140"
						},
						{
							"key": "max_duration_ms",
							"value": "0,35"
						},
						{
							"key": "target_duration_ms",
							"value": null
						},
						{
							"key": "min_energy",
							"value": "140"
						},
						{
							"key": "max_energy",
							"value": "0,35"
						},
						{
							"key": "target_energy",
							"value": "0,6"
						},
						{
							"key": "min_instrumentalness",
							"value": "140"
						},
						{
							"key": "max_instrumentalness",
							"value": "0,35"
						},
						{
							"key": "target_instrumentalness",
							"value": "0,6"
						},
						{
							"key": "min_key",
							"value": "140"
						},
						{
							"key": "max_key",
							"value": "0,35"
						},
						{
							"key": "target_key",
							"value": "0,6"
						},
						{
							"key": "min_liveness",
							"value": "140"
						},
						{
							"key": "max_liveness",
							"value": "0,35"
						},
						{
							"key": "target_liveness",
							"value": "0,6"
						},
						{
							"key": "min_loudness",
							"value": "140"
						},
						{
							"key": "max_loudness",
							"value": "0,35"
						},
						{
							"key": "target_loudness",
							"value": "0,6"
						},
						{
							"key": "min_mode",
							"value": "140"
						},
						{
							"key": "max_mode",
							"value": "0,35"
						},
						{
							"key": "target_mode",
							"value": "0,6"
						},
						{
							"key": "min_popularity",
							"value": "140"
						},
						{
							"key": "max_popularity",
							"value": "0,35"
						},
						{
							"key": "target_popularity",
							"value": "0,6"
						},
						{
							"key": "min_speechiness",
							"value": "140"
						},
						{
							"key": "max_speechiness",
							"value": "0,35"
						},
						{
							"key": "target_speechiness",
							"value": "0,6"
						},
						{
							"key": "min_tempo",
							"value": "140"
						},
						{
							"key": "max_tempo",
							"value": "0,35"
						},
						{
							"key": "target_tempo",
							"value": null
						},
						{
							"key": "min_time_signature",
							"value": "140"
						},
						{
							"key": "max_time_signature",
							"value": "0,6"
						},
						{
							"key": "target_time_signature",
							"value": "0,6"
						},
						{
							"key": "min_valence",
							"value": "140"
						},
						{
							"key": "max_valence",
							"value": "0,35"
						},
						{
							"key": "target_valence",
							"value": "0,6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Get Current User's Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"display_name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.display_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"external_urls.spotify is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.external_urls.spotify).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"href is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.href).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Get User's Top Items-type,time_range,limit,offset",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/top/artists?type=artists&time_range=medium_term&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"top",
						"artists"
					],
					"query": [
						{
							"key": "type",
							"value": "artists"
						},
						{
							"key": "time_range",
							"value": "medium_term"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Get User's Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Display name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.display_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"External URLs has a valid Spotify URL\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.external_urls).to.exist;",
							"  pm.expect(responseData.external_urls.spotify).to.exist.and.to.match(/^https:\\/\\/open\\.spotify\\.com\\/.*/, \"Invalid Spotify URL\");",
							"});",
							"",
							"",
							"pm.test(\"Href is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.href).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/users/smedjan",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"users",
						"smedjan"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Follow Playlist",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"public\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/followers?playlist_id=3cEYpjA9oz9GiPac4AsH4n",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"followers"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Unfollow Playlist",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/followers",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"followers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Get Followed Artists-type,after,limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate presence of 'artists' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.artists).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'items' array is present in the 'artists' object and is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.artists).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.artists.items).to.exist.and.to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'next' property is present and is null\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.artists).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.artists.next).to.exist.and.to.be.null;",
							"});",
							"",
							"",
							"pm.test(\"Verify the 'total' property is present in the 'artists' object and is 0\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.artists).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.artists.total).to.exist.and.to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/following?type=artist&after=0I2XqVXqHScXjHhk6AYYRe&limit=10",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"following"
					],
					"query": [
						{
							"key": "type",
							"value": "artist"
						},
						{
							"key": "after",
							"value": "0I2XqVXqHScXjHhk6AYYRe"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Follow Artists or Users-type,ids",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"2CIMQHirSU0MQqyYHq0eOx\": [\n        \"string\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/following?type=artist&ids=2CIMQHirSU0MQqyYHq0eOx",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"following"
					],
					"query": [
						{
							"key": "type",
							"value": "artist"
						},
						{
							"key": "ids",
							"value": "2CIMQHirSU0MQqyYHq0eOx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Unfollow Artists or Users-type,ids",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"74ASZWbe4lXaubB36ztrGX\": [\n        \"string\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.spotify.com/v1/me/following?type=artist&ids=2CIMQHirSU0MQqyYHq0eOx",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"following"
					],
					"query": [
						{
							"key": "type",
							"value": "artist"
						},
						{
							"key": "ids",
							"value": "2CIMQHirSU0MQqyYHq0eOx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Check If User Follows Artist or Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify the response contains the expected boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData[0]).to.be.a('boolean');",
							"    pm.expect(responseData[0]).to.equal(true);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/me/following/contains?type=artist&ids=2CIMQHirSU0MQqyYHq0eOx",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"me",
						"following",
						"contains"
					],
					"query": [
						{
							"key": "type",
							"value": "artist"
						},
						{
							"key": "ids",
							"value": "2CIMQHirSU0MQqyYHq0eOx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users-Check if Users Follow Playlist-playlist_id,ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Each element in the response is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(element) {",
							"    pm.expect(element).to.be.a('boolean');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/followers/contains?playlist_id=3cEYpjA9oz9GiPac4AsH4n&ids=jmperezperez",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"followers",
						"contains"
					],
					"query": [
						{
							"key": "playlist_id",
							"value": "3cEYpjA9oz9GiPac4AsH4n"
						},
						{
							"key": "ids",
							"value": "jmperezperez"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "BQCI7W0j_aCjp9I7QCxnYsYhcmzFFUAN73iOCD4VwV6fRVyG8ZMlbS14OpyUZMXDJt40DJ0hwsSl-eafiMm4y3rNIUVRWydEvx4R5NNFaSAhTg2gKqJi5u0r0k6wnCSFImE0x2KzvvFHgimDBh14GgYxk4L09Xz3-ZJiyTllpgwExm1XbIRO1O-4m0bTjkPf7nzqo4CJdKhVyiD6-Qb6h181WSbcFDyYA9hBAuDgiI8sC9fjW7gJAMbdgKYAOToB2Ur4AvCxA48Lj-wviBNcg9x_qPx2z9Yh-CCmL5jv1HrGSLrNrSq1LNCXCaHuNtc5C5DkCStq66xyhHLzv1v2",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}